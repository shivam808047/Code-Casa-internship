import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class StopwatchApp extends JFrame {
    private JButton startButton, stopButton, resetButton;
    private JLabel timeLabel;
    private Timer timer;
    private int elapsedTime = 0;
    private boolean isRunning = false;

    public StopwatchApp() {
        setTitle("Stopwatch Application");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        timeLabel = new JLabel("00:00:00");
        timeLabel.setFont(new Font("Verdana", Font.PLAIN, 32));
        timeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        add(timeLabel, BorderLayout.CENTER);

        startButton = new JButton("Start");
        stopButton = new JButton("Stop");
        resetButton = new JButton("Reset");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(startButton);
        buttonPanel.add(stopButton);
        buttonPanel.add(resetButton);
        add(buttonPanel, BorderLayout.SOUTH);

        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                start();
            }
        });

        stopButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                stop();
            }
        });

        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                reset();
            }
        });

        timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                elapsedTime++;
                updateDisplay();
            }
        });
    }

    private void start() {
        if (!isRunning) {
            timer.start();
            isRunning = true;
            startButton.setEnabled(false);
            stopButton.setEnabled(true);
        }
    }

    private void stop() {
        if (isRunning) {
            timer.stop();
            isRunning = false;
            startButton.setEnabled(true);
            stopButton.setEnabled(false);
        }
    }

    private void reset() {
        elapsedTime = 0;
        updateDisplay();
        stop();
    }

    private void updateDisplay() {
        int hours = elapsedTime / 3600;
        int minutes = (elapsedTime % 3600) / 60;
        int seconds = elapsedTime % 60;
        timeLabel.setText(String.format("%02d:%02d:%02d", hours, minutes, seconds));
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new StopwatchApp().setVisible(true);
            }
        });
    }
}

